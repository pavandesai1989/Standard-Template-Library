std::map is an associative container that store elements in key-value pair.
*******Benefits of using std::map :**********
It stores only unique keys and that too in sorted order based on its assigned sorting criteria.
As keys are in sorted order therefore searching element in map through key is very fast i.e. it takes logarithmic time.
In std::map there will be only one value attached with the every key.
std::map can be used as associative arrays.
It might be implemented using balanced binary trees.



std::map has Operator[] i.e.

mapped_type& operator[] (const key_type& k);
operator [] works in Find or Create Mode i.e. when called with a key K, it will try to look for element with given key K and can go in below 2 directions i.e.

If any element is found with key K, then it will return the reference of its value.
But if there is no element in map with K, then it will create a new element in map with key K and assign default value of value_type in its value field. Then it will return the value of newly created element as reference.





#include <iostream>
#include<vector>
#include<map>

using namespace std;

int main() 
{
     map<string,int> mp; //default sorted in asending order.It uses less<string> comparator

     //to sort in desending order
     //map<string,int,greater<string>> mp;
     
     /*
     insert return value  ******IIIIMP
     
     Return Value: The function returns a pair, with its member pair::first set to an iterator pointing to either the newly inserted element or to the          element with an equivalent key in the map. The pair::second element in the pair is set to true if a new element was inserted or false if an                equivalent key already existed.
     
    */
    
    example as below 
    
           map<int, int> m;
        // insert elements in random order
        m.insert({ 2, 30 });
        m.insert({ 1, 40 });
        m.insert({ 3, 60 });

        if(m.insert({2,56}).second == true)  
           cout<<"inserted"<<endl;
        else 
           cout<<" not inserted"<<endl;  
           
           
       //search in map by value 
       map<int,int>::iterator it = m.begin();
       while(it !=m.end())
       {
           if(it->second == 40)
              cout<<"found"<<endl;

           it++;   
       } 
           
     
     mp["pavan"] = 1;
     mp.insert({"rahul",34});
     mp.insert(make_pair("amit",45));
     
     

     //display 
     for(auto &ele:mp)
     {
         cout<<ele.first<<" "<<ele.second<<endl;
     }

     //we can only modify the value not key
     mp["pavan"] = 456; // returns reference. pavan modified from 1 to 456

     //mp.clear();  //deletes all ele from the map

     //search for the element 
     if(mp.find("pavan") != mp.end()) //found
        cout<<"ele found "<<endl;
     else
        cout<<"ele not found"<<endl;   

     //map::erase() is a built-in function in C++ STL that 
     //is used to erase elements from the container
     mp.erase("pavan"); //by passing the key 
     for(auto &ele:mp)
         cout<<ele.first<<" "<<ele.second<<endl<<endl<<endl;


     //erase by passing the iterator
     auto it = mp.find("amit");
     mp.erase(it);  
     for(auto &ele:mp)
        cout<<ele.first<<" "<<ele.second<<endl; 

     //erase based on range 
     /*
       map_name.erase(iterator position1, iterator position2)
       Parameters: The function accepts two mandatory parameters which are described below: 

        position1 – specifies the iterator that is the reference 
        to the element from which removal is to be done.
        position2 – specifies the iterator that is the reference 
        to the element up to which removal is to be done.
     */ 

        map<int, int> m;
        // insert elements in random order
        m.insert({ 2, 30 });
        m.insert({ 1, 40 });
        m.insert({ 3, 60 });
        m.insert({ 2, 20 });
        m.insert({ 5, 50 });  

        auto it1 = m.find(2);
        auto it2 = m.find(5);

        cout<<"before erase"<<endl;
        for(auto &ele:m)
           cout<<ele.first<<" "<<ele.second<<endl;
           
        //output of above is 
        before erase
        1 40
        2 30
        3 60
        5 50

        m.erase(it1,it2);

        cout<<"after erase"<<endl;
        for(auto &ele:m)
           cout<<ele.first<<" "<<ele.second<<endl;
           
           //output of above is 
           after erase
          1 40
          5 50

      cout<<"number of ele in map "<<m.size()<<endl;  
      
      if(m.empty())
            cout<<"map is empty"<<endl;
      else 
            cout<<"map is not empty"<<endl; 
            
     max_size() – Returns the maximum number of elements that the map can hold.
     
     
     **********//using the external sorting criteria************
      class compa
     {
         public:
         bool operator()(const string &s1,const string &s2)const
         {
             return (s1>s2);
         }
     };

     int main() 
     {

        map<string,int,compa> mp;

        mp.insert({"amit",23});
        mp.insert({"fool",77});
        mp.insert({"base",33});

        for(auto ele:mp)
           cout<<ele.first<<" "<<ele.second<<endl;

     }
     ***************
     
     *******Using map on User Defined objects ******
     class user
     {
         public:
            int age;
            string name;

         public:
            user(int age,string name):age(age),name(name){

            }  

            int getage()const
            {
                return age;
            }

            string getname()const 
            {
                return name;
            }

            bool operator<(const user &ob)const 
            {
                 return this->age<ob.age;
            }
     };


     int main()
     {
         map<user,int> mp;

         mp.insert({user(25,"pavan"),1});
         mp.insert({user(45,"amit"),5});
         mp.insert({user(65,"chotu"),1});


         map<user,int>::iterator it=mp.begin();
         for(;it!=mp.end();it++)
         {
             cout<<it->first.getage()<<"  ";

             cout<<it->first.getname()<<endl;//<<"::"<<it->first.getname()<<endl;
         }
     }
     
     *******************************
     
          


}
